#!/usr/bin/env python

# Disco: A command-line XMPP service discovery browser.
# Author: Lance Stout <lancestout@gmail.com>
# Credits: Nathan Fritz <fritzy@netflint.net>
#
# Copyright 2010 Lance Stout
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import sys
import time
import logging
import getpass
import sleekxmpp
from optparse import OptionParser


class Disco(sleekxmpp.ClientXMPP):

    """
    Sends a disco#info and disco#items request to a JID/node combination,
    and prints out the results.

    May also request only particular info categories such as just features,
    or just items.
    """
    
    def __init__(self, jid, password, target_jid, target_node='main', get=''):
        sleekxmpp.ClientXMPP.__init__(self, jid, password)
        self.add_event_handler("session_start", self.start)

        self.get = get
        self.target_jid = target_jid
        self.target_node = target_node
        self.results = {'identities': None,
                        'features': None,
                        'items': None}

        # Values for self.get to control which disco entities are reported
        self.info_types = ['', 'all', 'info', 'identities', 'features']
        self.identity_types = ['', 'all', 'info', 'identities']
        self.feature_types = ['', 'all', 'info', 'features']
        self.items_types = ['', 'all', 'items']
	
    def start(self, event):
        self.getRoster()
        self.sendPresence()
        if self.get in self.info_types:
            info = self['xep_0030'].get_info(jid=self.target_jid, 
                                             node=self.target_node,
                                             block=True)
            self.results['identities'] = info['disco_info']['identities']
            self.results['features'] = info['disco_info']['features']
        if self.get in self.items_types:
            items = self['xep_0030'].get_items(jid=self.target_jid, 
                                               node=self.target_node,
                                               block=True)
            self.results['items'] = items['disco_items']['items']
        else:
            logging.error("Invalid disco request type.")
            self.disconnect()

        header = 'XMPP Service Discovery: %s' % self.target_jid
        print(header)
        print('-' * len(header))
        if self.target_node != '':
            print('Node: %s' % self.target_node)
            print('-' * len(header))

        if self.get in self.identity_types:
            print('Identities:')
            for identity in self.results['identities']:
                print('  - ', identity)

        if self.get in self.feature_types:
            print('Features:')
            for feature in self.results['features']:
                print('  - %s' % feature)

        if self.get in self.items_types:
            print('Items:')
            for item in self.results['items']:
                print('  - %s' % str(item))

        self.disconnect()


if __name__ == '__main__':
    optp = OptionParser()
    optp.version = '%%prog 0.1'
    optp.usage = "Usage: %%prog [options] %s <jid> [<node>]" % \
                             'all|info|items|identities|features'

    optp.add_option('-q','--quiet', help='set logging to ERROR', 
                    action='store_const', 
                    dest='loglevel', 
                    const=logging.ERROR, 
                    default=logging.ERROR)
    optp.add_option('-d','--debug', help='set logging to DEBUG', 
                    action='store_const', 
                    dest='loglevel', 
                    const=logging.DEBUG, 
                    default=logging.ERROR)
    optp.add_option('-v','--verbose', help='set logging to COMM', 
                    action='store_const', 
                    dest='loglevel', 
                    const=5, 
                    default=logging.ERROR)

    # JID and password options.
    optp.add_option("-j", "--jid", dest="jid",
                    help="JID to use")
    optp.add_option("-p", "--password", dest="password",
                    help="password to use")
    opts,args = optp.parse_args()
    
    logging.basicConfig(level=opts.loglevel, format='%(levelname)-8s %(message)s')
            
    if len(args) < 2:
        optp.print_help()
        exit()

    if len(args) == 2:
        args = (args[0], args[1], '')

    if opts.jid is None:
        opts.jid = raw_input("Username: ")
    if opts.password is None:
        opts.password = getpass.getpass("Password: ")

    xmpp = Disco(opts.jid, opts.password, args[1], args[2], args[0])
    xmpp.registerPlugin('xep_0030')	
    if xmpp.connect():
        xmpp.process(threaded=False)
    else:
        print("Unable to connect.")
